#!/bin/env python3
"""
docstring sdfsdf
"""
import argparse
import os
import sys
sys.path.append('.')
from src._python import MAGIX
import os.path

parser = argparse.ArgumentParser(description='')

parser.add_argument("--outdir", type=str, dest = "OUTDIR", action="store",
                    default="/home/ahcorcha/repos/tools/MAGIX/data/CTCF_demo/OUT",
                    help="Directory in which a directory named MAGIX_TF_label will be created with the output.")

parser.add_argument("--step", type=str, dest ="STEP", default=1,
                    choices=["1","2","3","4"], action="store",
                    help="See description." )
  
parser.add_argument("--count_matrix", type=str, dest = "COUNT_MATRIX", action="store",
              default="/home/ahcorcha/repos/tools/MAGIX/data/CTCF_demo/IN/GHT_SELEX_CTCF_counts_aggregates_and_experiments_no_blacklisted_100k.bed",
              help="")
  
parser.add_argument("--design", type=str, dest = "DESIGN", action="store",
              default="/home/ahcorcha/repos/tools/MAGIX/data/CTCF_demo/IN/CTCF_design_matrix_per_TF.txt",
              help="Design matrix, must have columns for ... . E.g. ./data/CTCF_demo/IN/CTCF_design_matrix_per_TF.txt")
  
parser.add_argument("--TF", type=str, dest = "TF", default="CTCF", action="store",
                    help="Should be present in the Target column in the design matrix.")
  
parser.add_argument("--TF_label", type=str, dest = "TF_LABEL", action="store",
                    default="CTCF_FL", help="Used for the output file prefix.")


## Covariance account_covariance
parser.add_argument("--account_covariance", type=str, dest= "ACCOUNT_COVARIANCE",
                    default="TRUE", action="store", choices = ["TRUE", "FALSE"],
                    help="")

parser.add_argument("--test_depletion", type=str, dest = "TEST_DEPLETION", action="store",
                    default="FALSE", choices = ["TRUE", "FALSE"],
                    help="Whether to test for depletion instead of enrichment. Makes the values in the Cycle design matrix negative.")

 ## Step 2 exclusive options
parser.add_argument("--step2_samples", type=str, dest = "STEP2_SAMPLES", action="store",
                    default="all",
                    help="File with the name of the samples to be included in step 2, can be all to include every experiment in the design matrix.")

## Step 3 exclusive options
parser.add_argument("--ltr_sample_size", type=int, dest ="LTR_SAMPLE_SIZE", action="store",
                    default=1000,
                    help="How many peaks are to be included for a LTR test in step 3.")
  
## Step 3 and 4 exclusive options
parser.add_argument("--previous_model", type=str, dest = "PREVIOUS_MODEL", action="store",
                    default="/home/ahcorcha/repos/tools/MAGIX/data/CTCF_demo/OUT/MAGIX_CTCF_FL/target_CTCF_FL_step_2_model.RDS",
                    help="Model build in step 2 to be used in step 3 or step 4.")

## Compare to ChIP-seq exclusive options
parser.add_argument("--use_chip", type=str, dest = "USE_CHIP", action="store",
              default="FALSE", help="")
  
parser.add_argument("--chip_peaks", type=str, dest = "CHIP_PEAKS", action="store",
              default="/home/ahcorcha/repos/tools/MAGIX/data/CTCF_demo/IN/whole_genome_200_bins_closest_summit_CTCF_CTCFChIP2_IGO_10521_25_S37_small_100k.tab",
              help="File with the ")
  
parser.add_argument("--only_compare_to_chip", type=str, dest = "ONLY_COMPARE_TO_CHIP", action="store",
              default="FALSE", help="")

parser.add_argument("--total_ChIP", type=int, dest = "TOTAL_CHIP", action="store",
                    default=0, help="")  

parser.add_argument("--remove_target_from_aggregate", type=str, dest = "RM_FROM_AGG", action="store",
                    default="FALSE", help="Substracts the target from the aggregate counts, in cases where the aggregate includes the target signal but the aggregate is too small.")


args = parser.parse_args()
        
if __name__ == '__main__':

    args.script_path = os.path.dirname(os.path.realpath(sys.argv[0]))
    
    MAGIX.check_source_files( args )

    MAGIX.run_MAGIX( args )


